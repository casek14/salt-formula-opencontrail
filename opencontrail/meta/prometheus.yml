{%- if pillar.opencontrail is defined %}
  {%- from "opencontrail/map.jinja" import control, collector, compute, config, database, web, monitoring with context %}

  {%- set all_contrail_processes = [] %}
  {%- set all_contrail_apis = [] %}

  {%- if collector.get('enabled', False) %}
    {%- set collector_apis = ( 'contrail.collector', ) %}
    {%- set collector_processes = (
        'contrail-alarm-gen', 'contrail-analytics-api', 'contrail-collector',
        'contrail-nodemgr', 'contrail-query-engine', 'contrail-snmp-collector',
        'contrail-supervisord-analytics', 'contrail-topology',
        ) %}

    {%- for api in collector_apis %}
      {% do all_contrail_apis.append(api) %}
    {% endfor %}

    {%- for process in collector_processes %}
      {% do all_contrail_processes.append(process) %}
    {% endfor %}
  {%- endif %}

  {%- if compute.get('enabled', False) %}
    {%- set compute_apis = ( 'contrail.vrouter', 'contrail.node.manager' ) %}
    {%- set compute_processes = (
        'contrail-nodemgr-vrouter', 'contrail-supervisord-vrouter', 'contrail-vrouter-agent'
        ) %}

    {%- for api in compute_apis %}
      {% do all_contrail_apis.append(api) %}
    {% endfor %}

    {%- for process in compute_processes %}
      {% do all_contrail_processes.append(process) %}
    {% endfor %}
  {%- endif %}

  {%- if control.get('enabled', False) %}
    {%- set control_apis = ( 'contrail.api', 'contrail.discovery' ) %}

    {%- set control_processes = (
    'contrail-api', 'contrail-control', 'contrail-device-manager',
    'contrail-discovery', 'contrail-dns', 'contrail-job-server',
    'contrail-named', 'contrail-nodemgr-config',
    'contrail-nodemgr-control', 'contrail-schema',
    'contrail-supervisord-config', 'contrail-supervisord-control',
    'contrail-svc-monitor',
    ) %}

    {%- if config.get('ifmap', {}).get('engine', 'irond') == 'irond' %}
      {%- set control_processes = control_processes + ('contrail-ifmap-server', 'contrail-irond',) %}
    {%- endif %}

    {%- for api in control_apis %}
      {% do all_contrail_apis.append(api) %}
    {% endfor %}

    {%- for process in control_processes %}
      {% do all_contrail_processes.append(process) %}
    {% endfor %}
  {%- endif %}

  {%- if database.get('enabled', False) %}
    {%- set database_processes = (
        'kafka-server', 'cassandra-server',
        'contrail-nodemgr-database', 'contrail-supervisord-database',
        ) %}

    {%- for process in database_processes %}
      {% do all_contrail_processes.append(process) %}
    {% endfor %}
  {%- endif %}

  {%- if web.get('enabled', False) %}
    {%- if web.get('cache', {}).get('engine', '') == 'redis' %}
      {%- set web_processes = (
          'contrail-web-server', 'redis-server'
          ) %}
    {%- else %}
      {%- set web_processes = (
          'contrail-web-server',
          ) %}
    {%- endif %}

    {%- for process in web_processes %}
      {% do all_contrail_processes.append(process) %}
    {% endfor %}
  {%- endif %}

  {%- if database_processes is defined and
         database.get('cassandra', False) and
         exporters is defined %}
{%- set packages = exporters.get('jmx', {}).get('packages', ('jmx-exporter', )) %}
{%- set template = exporters.get('jmx', {}).get('template', 'opencontrail/files/jmx-exporter-default') %}
    {%- load_yaml as new_exporters_cfg %}
exporters:
  jmx:
    enabled: true
{%- if packages is defined %}
    packages:
    {%- for pkg in packages %}
    - {{ pkg }}
    {%- endfor %}
{%- endif %}
{%- if template is defined %}
    template:  {{ template }}
{%- endif %}
    services:
      cassandra:
        enabled: true
        template: opencontrail/files/jmx_exporter_cassandra.conf
        jmx_bind:
          address: localhost
          port: 7199
        bind:
          address: 0.0.0.0
          port: 9111
    {%- endload %}
{{ new_exporters_cfg|yaml(False) }}
  {%- endif %}

  {%- if control_processes is defined or
         collector_processes is defined or
         compute_processes is defined or
         database_processes is defined or
         web_processes is defined %}
server:
  alert:
    {%- for contrail_api in all_contrail_apis %}
      {%- set words = contrail_api.split('.') %}
    {% for word in words %}{% if word != 'api' %}{{ word | capitalize }}{% endif %}{% endfor %}APIInfo:
      if: >-
        http_response_status{service=~"{{ contrail_api }}"} == 0
      {%- raw %}
      for: 2m
      labels:
        severity: info
        service: "{{ $labels.service }}"
      annotations:
        summary: "Endpoint check for '{{ $labels.service }}' is failed"
        description: Endpoint check for '{{ $labels.service }}' is failed for 2 minutes on node {{ $labels.host }}
      {%- endraw %}
    {% for word in words %}{% if word != 'api' %}{{ word | capitalize }}{% endif %}{% endfor %}APIWarning:
      if: >-
        count(http_response_status{service=~"{{ contrail_api }}"} == 0) by (service) >= count(http_response_status{service=~"{{ contrail_api }}"}) by (service) *{{ monitoring.services_failed_warning_threshold_percent }}
      {%- raw %}
      for: 2m
      labels:
        severity: warning
        service: "{{ $labels.service }}"
      annotations:
        summary: "More than {%- endraw %} {{monitoring.services_failed_warning_threshold_percent*100}}%{%- raw %} of '{{ $labels.service }}' is down"
        description: More than {%- endraw %} {{monitoring.services_failed_warning_threshold_percent*100}}%{%- raw %} of '{{ $labels.service }}' is down
      {%- endraw %}
    {% for word in words %}{% if word != 'api' %}{{ word | capitalize }}{% endif %}{% endfor %}APICritical:
      if: >-
        count(http_response_status{service=~"{{ contrail_api }}"} == 0) by (service) >= count(http_response_status{service=~"{{ contrail_api }}"}) by (service) *{{ monitoring.services_failed_critical_threshold_percent }}
      {%- raw %}
      for: 2m
      labels:
        severity: critical
        service: "{{ $labels.service }}"
      annotations:
        summary: "More than {%- endraw %} {{monitoring.services_failed_critical_threshold_percent*100}}%{%- raw %} of '{{ $labels.service }}' is down"
        description: More than {%- endraw %} {{monitoring.services_failed_critical_threshold_percent*100}}%{%- raw %} of '{{ $labels.service }}' is down
      {%- endraw %}
    {% for word in words %}{% if word != 'api' %}{{ word | capitalize }}{% endif %}{% endfor %}APIDown:
      if: >-
        count(http_response_status{service=~"{{ contrail_api }}"} == 0) by (service) == count(http_response_status{service=~"{{ contrail_api }}"}) by (service)
      {%- raw %}
      for: 2m
      labels:
        severity: down
        service: "{{ $labels.service }}"
      annotations:
        summary: "All '{{ $labels.service }}' APIs are down"
        description: All '{{ $labels.service }}' APIs are down
      {%- endraw %}
    {%- endfor %}
{%- for contrail_process in all_contrail_processes %}
      {%- set words = contrail_process.split('-') %}
    {% for word in words %}{{ word | capitalize }}{% endfor %}ProcessInfo:
      if: >-
        procstat_running{process_name="{{ contrail_process }}"} == 0
      labels:
        severity: info
        service: {{ contrail_process }}
      annotations:
    {%- raw %}
        summary: '{{ $labels.service }} service is down'
        description: '{{ $labels.service }} service is down on node {{ $labels.host }}'
    {%- endraw %}
    {% for word in words %}{{ word | capitalize }}{% endfor %}ProcessWarning:
      if: >-
        count(procstat_running{process_name="{{ contrail_process }}"} == 0) >= count(procstat_running{process_name="{{ contrail_process }}"}) *{{ monitoring.services_failed_warning_threshold_percent }}
      labels:
        severity: warning
        service: {{ contrail_process }}
      annotations:
    {%- raw %}
        summary: "More than {%- endraw %} {{monitoring.services_failed_warning_threshold_percent*100}}%{%- raw %} of '{{ $labels.service }}' is down"
        description: "More than {%- endraw %} {{monitoring.services_failed_warning_threshold_percent*100}}%{%- raw %} of '{{ $labels.service }}' is down"
    {%- endraw %}
    {% for word in words %}{{ word | capitalize }}{% endfor %}ProcessCritical:
      if: >-
        count(procstat_running{process_name="{{ contrail_process }}"} == 0) >= count(procstat_running{process_name="{{ contrail_process }}"}) *{{ monitoring.services_failed_critical_threshold_percent }}
      labels:
        severity: critical
        service: {{ contrail_process }}
      annotations:
    {%- raw %}
        summary: "More than {%- endraw %} {{monitoring.services_failed_critical_threshold_percent*100}}%{%- raw %} of '{{ $labels.service }}' is down"
        description: "More than {%- endraw %} {{monitoring.services_failed_critical_threshold_percent*100}}%{%- raw %} of '{{ $labels.service }}' is down"
    {%- endraw %}
    {% for word in words %}{{ word | capitalize }}{% endfor %}ProcessDown:
      if: >-
        count(procstat_running{process_name="{{ contrail_process }}"} == 0) == count(procstat_running{process_name="{{ contrail_process }}"})
      labels:
        severity: down
        service: {{ contrail_process }}
      annotations:
    {%- raw %}
        summary: "All '{{ $labels.service }}' services are down"
        description: "All '{{ $labels.service }}' services are down"
    {%- endraw %}
{%- endfor %}
    {%- if control_processes is defined %}
{%- raw %}
    ContrailBGPSessionsNoneUp:
      if: >-
        max(contrail_bgp_session_up_count) by (host) == 0
      for: 2m
      labels:
        severity: warning
        service: contrail-control
      annotations:
        summary: 'no active BGP sessions'
        description: 'There are no active BGP sessions on node {{ $labels.host }}'
    ContrailBGPSessionsSomeDown:
      if: >-
        min(contrail_bgp_session_down_count) by (host) > 0
      for: 2m
      labels:
        severity: warning
        service: contrail-control
      annotations:
        summary: 'inactive BGP sessions'
        description: 'There are inactive BGP sessions on node {{ $labels.host }}'
    ContrailBGPSessionsNone:
      if: >-
        max(contrail_bgp_session_count) by (host) == 0
      for: 2m
      labels:
        severity: warning
        service: contrail-control
      annotations:
        summary: 'No BGP sessions'
        description: 'There are no BGP sessions on node {{ $labels.host }}'
    ContrailXMPPSessionsNoneUp:
      if: >-
        sum(contrail_xmpp_session_up_count) < count(contrail_vrouter_xmpp) * 2
      for: 2m
      labels:
        severity: warning
        service: contrail-control
      annotations:
        summary: 'Unavailable established XMPP sessions'
        description: 'There is compute instance without established XMPP session'
    ContrailXMPPSessionsSomeDown:
      if: >-
        min(contrail_xmpp_session_down_count) by (host) > 0
      for: 2m
      labels:
        severity: warning
        service: contrail-control
      annotations:
        summary: 'inactive XMPP sessions'
        description: 'There are inactive XMPP sessions on node {{ $labels.host }}'
    ContrailXMPPSessionsNone:
      if: >-
        sum(contrail_xmpp_session_count) < count(contrail_vrouter_xmpp) * 2
      for: 2m
      labels:
        severity: warning
        service: contrail-control
      annotations:
        summary: 'Unavailable XMPP sessions'
        description: 'There is compute instance with missing XMPP session'
    ContrailXMPPSessionsTooMany:
      if: >-
{%- endraw %}
    {%- set xmpp_toohigh_threshold = monitoring.xmpp_sessions_too_high_threshold %}
        min(contrail_xmpp_session_count) by (host) >= {{ xmpp_toohigh_threshold }}
{%- raw %}
      for: 2m
      labels:
        severity: warning
        service: contrail-control
      annotations:
        summary: 'Too many XMPP sessions'
        description: 'There are too many XMPP sessions on node {{ $labels.host }} (current value={{ $value }}, threshold={% endraw %}{{ xmpp_toohigh_threshold }})'
    ContrailXMPPSessionsTooManyVariations:
      if: >-
    {%- set xmpp_variation_threshold = monitoring.xmpp_sessions_variation_threshold %}
        abs(delta(contrail_xmpp_session_count[2m])) >= {{ xmpp_variation_threshold }}
{%- raw %}
      labels:
        severity: warning
        service: contrail-control
      annotations:
        summary: 'Number of XMPP sessions changed between checks is too high'
        description: 'There are too many XMPP sessions changes on node {{ $labels.host }} (current value={{ $value }}, threshold={% endraw %}{{ xmpp_variation_threshold }})'
    {%- endif %}

    {%- if compute_processes is defined %}
{%- raw %}
    ContrailVrouterXMPPSessionsNone:
      if: >-
        max(contrail_vrouter_xmpp) by (host) == 0
      for: 2m
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'No vRouter XMPP sessions'
        description: 'There are no vRouter XMPP sessions on node {{ $labels.host }}'
    ContrailVrouterXMPPSessionsTooMany:
      if: >-
{%- endraw %}
    {%- set vrouter_xmpp_toohigh_threshold = monitoring.vrouter_xmpp_sessions_too_high_threshold %}
        min(contrail_vrouter_xmpp) by (host) >= {{ vrouter_xmpp_toohigh_threshold }}
{%- raw %}
      for: 2m
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'Too many vRouter XMPP sessions'
        description: 'There are too many vRouter XMPP sessions on node {{ $labels.host }} (current value={{ $value }}, threshold={%- endraw %}{{ vrouter_xmpp_toohigh_threshold }})'
    ContrailVrouterXMPPSessionsTooManyVariations:
      if: >-
    {%- set vrouter_xmpp_variation_threshold = monitoring.vrouter_xmpp_sessions_variation_threshold %}
        abs(delta(contrail_vrouter_xmpp[2m])) >= {{ vrouter_xmpp_variation_threshold }}
{%- raw %}
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'Number of vRouter XMPP sessions changed between checks is too high'
        description: 'There are too many vRouter XMPP sessions changes on node {{ $labels.host }} (current value={{ $value }}, threshold={%- endraw %}{{ vrouter_xmpp_variation_threshold }})'
{%- raw %}
    ContrailVrouterDNSXMPPSessionsNone:
      if: >-
        max(contrail_vrouter_dns_xmpp) by (host) == 0
      for: 2m
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'No vRouter DNS-XMPP sessions'
        description: 'There are no vRouter DNS-XMPP sessions on node {{ $labels.host }}'
    ContrailVrouterDNSXMPPSessionsTooMany:
      if: >-
{%- endraw %}
    {%- set vrouter_dns_xmpp_toohigh_threshold = monitoring.vrouter_dns_xmpp_sessions_too_high_threshold %}
        min(contrail_vrouter_dns_xmpp) by (host) >= {{ vrouter_dns_xmpp_toohigh_threshold }}
{%- raw %}
      for: 2m
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'Too many vRouter DNS-XMPP sessions'
        description: 'There are too many vRouter DNS-XMPP sessions on node {{ $labels.host }} (current value={{ $value }}, threshold={%- endraw %}{{ vrouter_dns_xmpp_toohigh_threshold }})'
    ContrailVrouterDNSXMPPSessionsTooManyVariations:
      if: >-
    {%- set vrouter_dns_xmpp_variation_threshold = monitoring.vrouter_dns_xmpp_sessions_variation_threshold %}
        abs(delta(contrail_vrouter_dns_xmpp[2m])) >= {{ vrouter_dns_xmpp_variation_threshold }}
{%- raw %}
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'Number of vRouter DNS-XMPP sessions changed between checks is too high'
        description: 'There are too many vRouter DNS-XMPP sessions changes on node {{ $labels.host }} (current value={{ $value }}, threshold={%- endraw %}{{ vrouter_dns_xmpp_variation_threshold }})'
    ContrailVrouterLLSSessionsTooMany:
      if: >-
    {%- set vrouter_lls_toohigh_threshold = monitoring.vrouter_lls_too_high_threshold %}
        min(contrail_vrouter_lls) by (host) >= {{ vrouter_lls_toohigh_threshold }}
{%- raw %}
      for: 2m
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'Too many vRouter LLS sessions'
        description: 'There are too many vRouter LLS sessions on node {{ $labels.host }} (current value={{ $value }}, threshold={%- endraw %}{{ vrouter_lls_toohigh_threshold }})'
    ContrailVrouterLLSSessionsTooManyVariations:
      if: >-
    {%- set vrouter_lls_variation_threshold = monitoring.vrouter_lls_variation_threshold %}
        abs(delta(contrail_vrouter_lls[2m])) >= {{ vrouter_lls_variation_threshold }}
{%- raw %}
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'Number of vRouter LLS sessions changed between checks is too high'
        description: 'There are too many vRouter LLS sessions changes on node {{ $labels.host }} (current value={{ $value }}, threshold={%- endraw %}{{ vrouter_lls_variation_threshold }})'
    ContrailFlowsActiveTooMany:
      if: >-
    {%- set vrouter_flows_active_toohigh_threshold = monitoring.vrouter_flows_active_too_high_threshold %}
        deriv(contrail_vrouter_flows_active[5m]) >= {{ vrouter_flows_active_toohigh_threshold }}
{%- raw %}
      for: 2m
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'Too many vRouter active flows'
        description: 'There are too many active vRouter flows on node {{ $labels.host }} (current value={{ $value }}, threshold={%- endraw %}{{ vrouter_flows_active_toohigh_threshold }})'
    ContrailFlowsDiscardTooMany:
      if: >-
    {%- set vrouter_flows_discard_toohigh_threshold = monitoring.vrouter_flows_discard_too_high_threshold %}
        rate(contrail_vrouter_flows_discard[5m]) >= {{ vrouter_flows_discard_toohigh_threshold }}
{%- raw %}
      for: 2m
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'Too many vRouter discarded flows'
        description: 'There are too many discarded vRouter flows on node {{ $labels.host }} (current value={{ $value }}, threshold={%- endraw %}{{ vrouter_flows_discard_toohigh_threshold }})'
    ContrailFlowsDropTooMany:
      enabled: false
      if: >-
    {%- set vrouter_flows_flow_action_drop_toohigh_threshold = monitoring.vrouter_flows_flow_action_drop_too_high_threshold %}
        rate(contrail_vrouter_flows_flow_action_drop[5m]) >= {{ vrouter_flows_flow_action_drop_toohigh_threshold }}
{%- raw %}
      for: 2m
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'Too many vRouter dropped flows'
        description: 'There are too many dropped vRouter flows on node {{ $labels.host }} (current value={{ $value }} flows/s, threshold={%- endraw %}{{ vrouter_flows_flow_action_drop_toohigh_threshold }} flows/s)'
    ContrailFlowsFragErrTooMany:
      if: >-
    {%- set vrouter_flows_frag_err_toohigh_threshold = monitoring.vrouter_flows_frag_err_too_high_threshold %}
        min(contrail_vrouter_flows_frag_err) by (host) >= {{ vrouter_flows_frag_err_toohigh_threshold }}
{%- raw %}
      for: 2m
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'Too many vRouter flows with fragment errors'
        description: 'There are too many vRouter flows with fragment errors on node {{ $labels.host }} (current value={{ $value }}, threshold={%- endraw %}{{ vrouter_flows_frag_err_toohigh_threshold }})'
    ContrailFlowsInvalidNHTooMany:
      if: >-
    {%- set vrouter_flows_invalid_nh_toohigh_threshold = monitoring.vrouter_flows_invalid_nh_too_high_threshold %}
        rate(contrail_vrouter_flows_invalid_nh[5m]) >= {{ vrouter_flows_invalid_nh_toohigh_threshold }}
{%- raw %}
      for: 2m
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'Too many vRouter flows with invalid next hop'
        description: 'There are too many vRouter flows with invalid next hop on node {{ $labels.host }} (current value={{ $value }}, threshold={%- endraw %}{{ vrouter_flows_invalid_nh_toohigh_threshold }})'
    ContrailFlowsInvalidITFTooMany:
      if: >-
    {%- set vrouter_flows_composite_invalid_interface_toohigh_threshold = monitoring.vrouter_flows_composite_invalid_interface_too_high_threshold %}
        rate(contrail_vrouter_flows_composite_invalid_interface[5m]) >= {{ vrouter_flows_composite_invalid_interface_toohigh_threshold }}
{%- raw %}
      for: 2m
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'Too many vRouter flows with composite invalid interface'
        description: 'There are too many vRouter flows with composite invalid interface on node {{ $labels.host }} (current value={{ $value }}, threshold={%- endraw %}{{ vrouter_flows_composite_invalid_interface_toohigh_threshold }})'
    ContrailFlowsInvalidLabelTooMany:
      if: >-
    {%- set vrouter_flows_invalid_label_toohigh_threshold = monitoring.vrouter_flows_invalid_label_too_high_threshold %}
        min(contrail_vrouter_flows_invalid_label) by (host) >= {{ vrouter_flows_invalid_label_toohigh_threshold }}
{%- raw %}
      for: 2m
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'Too many vRouter flows with invalid label'
        description: 'There are too many vRouter flows with invalid label on node {{ $labels.host }} (current value={{ $value }}, threshold={%- endraw %}{{ vrouter_flows_invalid_label_toohigh_threshold }})'
    ContrailFlowsQueueLimitExceededTooMany:
      if: >-
    {%- set vrouter_flows_flow_queue_limit_exceeded_toohigh_threshold = monitoring.vrouter_flows_flow_queue_limit_exceeded_too_high_threshold %}
        rate(contrail_vrouter_flows_flow_queue_limit_exceeded[5m]) >= {{ vrouter_flows_flow_queue_limit_exceeded_toohigh_threshold }}
{%- raw %}
      for: 2m
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'Too many vRouter flows with queue limit exceeded'
        description: 'There are too many vRouter flows with queue limit exceeded on node {{ $labels.host }} (current value={{ $value }}, threshold={%- endraw %}{{ vrouter_flows_flow_queue_limit_exceeded_toohigh_threshold }})'
    ContrailFlowsTableFullTooMany:
      if: >-
    {%- set vrouter_flows_flow_table_full_toohigh_threshold = monitoring.vrouter_flows_flow_table_full_too_high_threshold %}
        min(contrail_vrouter_flows_flow_table_full) by (host) >= {{ vrouter_flows_flow_table_full_toohigh_threshold }}
{%- raw %}
      for: 2m
      labels:
        severity: warning
        service: contrail-compute
      annotations:
        summary: 'Too many vRouter flows with table full'
        description: 'There are too many vRouter flows with table full on node {{ $labels.host }} (current value={{ $value }}, threshold={%- endraw %}{{ vrouter_flows_flow_table_full_toohigh_threshold }})'
    {%- endif %}

    {%- if database.get('enabled', False) %}
    ZookeeperInfo:
      if: >-
        zookeeper_up != 1
      for: 2m
      labels:
        severity: info
        service: zookeeper
      annotations:
        summary: 'Zookeeper service down'
        description: 'Zookeeper service is down on node {% raw %}{{ $labels.host }}{% endraw %}.'
    ZookeeperWarning:
      if: >-
        count(zookeeper_up == 0) >= count(zookeeper_up) * {{ monitoring.services_failed_warning_threshold_percent }}
      for: 2m
      labels:
        severity: warning
        service: zookeeper
      annotations:
        summary: "More than {{monitoring.services_failed_warning_threshold_percent*100}}% of Zookeeper services are down"
        description: "More than {{monitoring.services_failed_warning_threshold_percent*100}}% of Zookeeper services are down"
    ZookeeperCritical:
      if: >-
        count(zookeeper_up == 0) >= count(zookeeper_up) * {{ monitoring.services_failed_critical_threshold_percent }}
      for: 2m
      labels:
        severity: critical
        service: zookeeper
      annotations:
        summary: "More than {{monitoring.services_failed_critical_threshold_percent*100}}% of Zookeeper services are down"
        description: "More than {{monitoring.services_failed_critical_threshold_percent*100}}% of Zookeeper services are down"
    ZookeeperDown:
      if: >-
        count(zookeeper_up == 0) == count(zookeeper_up)
      for: 2m
      labels:
        severity: down
        service: zookeeper
      annotations:
        summary: 'All Zookeeper services are down'
        description: 'All Zookeeper services are down'
    {%- endif %}

    {%- if exporters is defined %}
      {%- include "prometheus/_exporters_config.sls" %}
    {%- endif %}
  {%- endif %}
{%- endif %}

